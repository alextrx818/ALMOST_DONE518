#!/usr/bin/env python3
"""
Test file to verify the logger initialization and usage in orchestrate_complete.py
"""
import unittest
import asyncio
import sys
from pathlib import Path

# Add project root to path to allow imports
sys.path.append(str(Path(__file__).parent))

class OrchestratorLoggerTest(unittest.TestCase):
    """Test case for orchestrator logging issues."""
    
    def test_module_logger_initialization(self):
        """Test that the module logger is properly initialized."""
        # Import the module - this should not crash
        import orchestrate_complete
        
        # Verify the logger is initialized with the correct name
        self.assertEqual(orchestrate_complete.logger.name, "orchestrator")
    
    async def _run_pipeline_test(self):
        """Helper to run the pipeline async function for testing."""
        from orchestrate_complete import run_complete_pipeline
        
        # Mock dependencies to prevent actual API calls
        # This is just enough to get past the initial logger usage
        try:
            # We expect this to fail due to missing data, not due to UnboundLocalError
            await run_complete_pipeline()
        except Exception as e:
            # We want to make sure it's not an UnboundLocalError
            self.assertNotIsInstance(e, UnboundLocalError)
            # It should fail with a different error related to missing data or APIs
            return True
            
        # If it doesn't fail, something is wrong with our test setup
        return False
        
    def test_run_complete_pipeline(self):
        """Test that run_complete_pipeline doesn't have UnboundLocalError."""
        result = asyncio.run(self._run_pipeline_test())
        self.assertTrue(result, "Pipeline should have encountered a controlled error, not UnboundLocalError")

if __name__ == "__main__":
    unittest.main()
